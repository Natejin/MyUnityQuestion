<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>UnityCommandBuffer</Title>
			<Shortcut>CommandBuffer</Shortcut>
			<Description>
        Code snippet for 'CommandBuffer'</Description>
			<Author>NateJin</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
      <Declarations>
        <Literal>
          <ID>ClassName</ID>
          <Default>ClassName</Default>
          <ToolTip>ClassName</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[public class $ClassName$System : JobComponentSystem
    {
        EndSimulationEntityCommandBufferSystem endSimulationEntityCommandBufferSystem;
        BeginInitializationEntityCommandBufferSystem beginInitializationEntityCommandBufferSystem;
        protected override void OnCreate()
        {
            beginInitializationEntityCommandBufferSystem = World.GetOrCreateSystem<BeginInitializationEntityCommandBufferSystem>();
            endSimulationEntityCommandBufferSystem = World.GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>();
        }
        [RequireComponentTag(typeof(Unit), typeof(JECS))]
        [ExcludeComponent(typeof(HasTarget))]
        public struct $ClassName$Job : IJobForEachWithEntity<Translation>
        {
            public EntityCommandBuffer.Concurrent beginCommandBuffer;
            public EntityCommandBuffer.Concurrent endCommandBuffer;

            public void Execute(Entity entity, int index, ref Translation translation)
            {

            }
        }
        protected override JobHandle OnUpdate(JobHandle inputDependencies)
        {
            var jobHandle = new $ClassName$Job
            {
                beginCommandBuffer = beginInitializationEntityCommandBufferSystem.CreateCommandBuffer().ToConcurrent(),
                endCommandBuffer = endSimulationEntityCommandBufferSystem.CreateCommandBuffer().ToConcurrent(),
            }.Schedule(this, inputDependencies);
            beginInitializationEntityCommandBufferSystem.AddJobHandleForProducer(jobHandle);
            endSimulationEntityCommandBufferSystem.AddJobHandleForProducer(jobHandle);

            return jobHandle;
        }
    }]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>